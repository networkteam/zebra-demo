prototype(Zebra.Site:Document.Page.Api) < prototype(Networkteam.Neos.ContentApi:DefaultDocument) {
  meta {
    isRootPage = ${documentNode == site}

    mainNavigation = Networkteam.Neos.ContentApi:MenuItems {
      maximumLevels = 1
    }
  }
  site = Networkteam.Neos.ContentApi:BaseNode {
    @context.node = ${site}
  }

  # Render node with children recursively
  node = Networkteam.Neos.ContentApi:RecursiveNode
}

prototype(Zebra.Site:Document.RootPage.Api) < prototype(Zebra.Site:Document.Page.Api)
prototype(Zebra.Site:Document.Folder.Api) < prototype(Zebra.Site:Document.Page.Api)
prototype(Zebra.Site:Document.NotFound.Api) < prototype(Zebra.Site:Document.Page.Api)
prototype(Zebra.Site:Document.Article.Api) < prototype(Zebra.Site:Document.Page.Api)

prototype(Neos.Neos:Shortcut.Api) < prototype(Zebra.Site:Document.Page.Api) {
  @context.additionalDocumentProperties = Neos.Fusion:DataStructure {
    @context.targetNode = Neos.Fusion:Case {
      firstChildNode {
        condition = ${q(documentNode).property('targetMode') == 'firstChildNode'}
        renderer = ${q(documentNode).find('[instanceof Neos.Neos:Document]').get(0)}
      }
      parentNode {
        condition = ${q(documentNode).property('targetMode') == 'parentNode'}
        renderer = ${q(documentNode).parents().get(0)}
      }
      default {
        condition = true
        renderer = false
      }
    }

    targetUri = Neos.Fusion:Case {
      isNode {
        condition = ${targetNode}
        renderer = Neos.Neos:NodeUri {
          node = ${targetNode}
        }
      }
      selectedTarget {
        condition = ${q(documentNode).property('targetMode') == 'selectedTarget'}
        renderer = ${q(documentNode).property('target')}
      }
    }
    targetUri.@process.convertUri = Neos.Neos:ConvertUris

    targetNodeTitle = ${targetNode ? q(targetNode).property('title') : null}
  }

  node.properties.@process.additionalDocumentProperties = ${Array.concat(value, additionalDocumentProperties)}
}

prototype(Networkteam.Neos.ContentApi:RecursiveNode) {
  @context._childNodes = Neos.Fusion:Case {
    contentReferences {
      condition = ${q(node).is('[instanceof Neos.NodeTypes.ContentReferences:ContentReferences]')}
      renderer = ${q(node).property('references')}
    }
    default {
      condition = true
      renderer = ${q(node).children('[!instanceof Neos.Neos:Document]').get()}
    }
  }
}
